import type { BunPlugin } from "bun"
import terser, { type Options } from "html-minifier-terser"

export function htmlPlugin(): BunPlugin {
	return {
		name: `html-plugin`,
		setup({ config, onLoad }) {
			const processHTML = htmlProcessor(config.minify)

			onLoad({ filter: /\.html$/u }, async ({ path }) => {
				const html = await processHTML(path)

				return {
					contents: html,
					loader: `html`,
				}
			})
		},
	}
}

function htmlProcessor(
	minify: boolean | { whitespace?: boolean; syntax?: boolean; identifiers?: boolean } | undefined,
): (path: string) => Promise<string> {
	if (!minify) {
		return readFile
	}

	const opts = terserOptions()
	if (minify !== true) {
		const { syntax = true, whitespace = true } = minify
		opts.collapseBooleanAttributes = syntax
		opts.collapseInlineTagWhitespace = whitespace
		opts.collapseWhitespace = whitespace
		opts.removeEmptyAttributes = syntax
		opts.removeRedundantAttributes = syntax
	}

	return minifier(opts)
}

function readFile(path: string): Promise<string> {
	return Bun.file(path).text()
}

function minifier(opts: Options) {
	return async (path: string): Promise<string> => {
		const html = await readFile(path)
		return terser.minify(html, opts)
	}
}

function terserOptions() {
	return {
		caseSensitive: false,
		collapseBooleanAttributes: true,
		collapseInlineTagWhitespace: true,
		collapseWhitespace: true,
		conservativeCollapse: false,
		continueOnParseError: false,
		decodeEntities: true,
		html5: true,
		includeAutoGeneratedTags: true,
		keepClosingSlash: false,
		noNewlinesBeforeTagClose: false,
		preserveLineBreaks: false,
		preventAttributesEscaping: true,
		processConditionalComments: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeEmptyAttributes: true,
		removeEmptyElements: false,
		removeOptionalTags: false,
		removeRedundantAttributes: true,
		removeScriptTypeAttributes: false,
		removeStyleLinkTypeAttributes: false,
		removeTagWhitespace: false,
		sortAttributes: true,
		sortClassName: true,
		useShortDoctype: true,
	}
}
